# -------------------------------------------------
# Auto-generated by convertTomlToPythonDataClass.py
# Do not edit directly; instead, edit the TOML file.
# Generated from 3.10 _DVM Commands.toml
# -------------------------------------------------

from dataclasses import dataclass, field
import math

@dataclass
class DVM:
    def __init__(self, query_func, write_func):
        self._query = query_func
        self._write = write_func
    def get_getCurrentVoltage(self):
        """
        Syntax: :DVM:CURRent?
        
        Description: Queries the current voltage value under test.
        
        Remarks: N/A
        
        Return Format: N/A
        
        Example: N/A
        
        Input_Min = "N/A"
        Input_Max = "N/A"
        Input_Values = "N/A"
        Is_Query = "Yes"
        """
        cmd = ":DVM:CURRent?"
        return self._query(cmd)

    def toggleDVM(self, value: int = None):
        """
        Syntax: :DVM:ENABle <bool> :DVM:ENABle?
        
        Description: Enables or disables the digital voltmeter; or queries the on/off status of the digital voltmeter.
        
        Remarks: N/A
        
        Return Format: The query returns 1 or 0.
        
        Example: :DVM:ENABle ON    /*Enables the digital voltmeter.*/ :DVM:ENABle?      /*The query returns 1.*/
        
        Input_Min = "N/A"
        Input_Max = "N/A"
        Input_Values = "Bool"
        Is_Query = "Yes"
        """
        if value is None:
            cmd = ":DVM:ENABle?"
            return self._query(cmd)
        else:
            cmd = f":DVM:ENABle {value}"
            response = self._write(cmd)
            return int(response)

    def setDVMSource(self, value: str = None):
        """
        Syntax: :DVM:SOURce <source> :DVM:SOURce?
        
        Description: Sets or queries the source of the digital voltmeter.
        
        Remarks: N/A
        
        Return Format: The query returns CHAN1, CHAN2, CHAN3, or CHAN4.
        
        Example: :DVM:SOURce CHANnel1    /*Sets the source of DVM to CHANnel1.*/ :DVM:SOURce?            /*The query returns CHAN1.*/
        
        Input_Min = "N/A"
        Input_Max = "N/A"
        Input_Values = "{CHANnel1|CHANnel2|CHANnel3|CHANnel4}"
        Is_Query = "Yes"
        """
        if value is None:
            cmd = ":DVM:SOURce?"
            return self._query(cmd)
        else:
            allowed_values = ['CHANNEL1|CHANNEL2|CHANNEL3|CHANNEL4']
            if str(value).upper() not in allowed_values:
                return "ERROR: Value must be in {CHANnel1|CHANnel2|CHANnel3|CHANnel4}"
            cmd = f":DVM:SOURce {value}"
            response = self._write(cmd)
            return int(response)

    def setDVMMode(self, value: str = None):
        """
        Syntax: :DVM:MODE <mode> :DVM:MODE?
        
        Description: Sets or queries the mode of the digital voltmeter.
        
        Remarks: • ACRMs: displays the root-mean-square value of the acquired data, with the DC component removed. • DC: displays the root-average-square value of the acquired data. • DCRMs: displays the root-mean-square value of the acquired data.
        
        Return Format: The query returns ACRM, DC, or DCRM.
        
        Example: :DVM:MODE DC     /*Sets the mode of the digital voltmeter to DC.*/ :DVM:MODE?           /*The query returns DC.*/
        
        Input_Min = "N/A"
        Input_Max = "N/A"
        Input_Values = "{ACRMs|DC|DCRMs}"
        Is_Query = "Yes"
        """
        if value is None:
            cmd = ":DVM:MODE?"
            return self._query(cmd)
        else:
            allowed_values = ['ACRMS|DC|DCRMS']
            if str(value).upper() not in allowed_values:
                return "ERROR: Value must be in {ACRMs|DC|DCRMs}"
            cmd = f":DVM:MODE {value}"
            response = self._write(cmd)
            return int(response)

