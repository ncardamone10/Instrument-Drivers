# SKIP_ME
# 3.24 :SYSTem Commands

["3.24.1 :SYSTem:AOUTput"]
Syntax = ":SYSTem:AOUTput <auxoutput> :SYSTem:AOUTput?"
Description = "Sets or queries the type of the signal output from the rear-panel [AUX OUT] connector."
Remarks = "• TOUT: outputs a signal that reflects the current capture rate when a trigger occurs. • PFAil: outputs a pulse signal on a pass or fail event."
"Return Format" = "The query returns TOUT or PFA."
Example = ":SYSTem:AOUTput PFAil   /*Sets the signal type to PFAil.*/ :SYSTem:AOUTput?      /*The query returns PFA.*/"
Class = "System"
Function = "aux_output"
Command = ":SYSTem:AOUTput"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "{TOUT|PFAil}"
Is_Query = "Yes"

["3.24.2 :SYSTem:BEEPer"]
Syntax = ":SYSTem:BEEPer <bool> :SYSTem:BEEPer?"
Description = "Turns on or off the beeper or queries the on/off status of the beeper."
Remarks = "N/A"
"Return Format" = "The query returns 1 or 0."
Example = ":SYSTem:BEEPer ON    /*Enables the beeper.*/ :SYSTem:BEEPer?      /*Returns 1.*/"
Class = "System"
Function = "beeper"
Command = ":SYSTem:BEEPer"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "{OFF|ON}"
Is_Query = "Yes"

["3.24.3 :SYSTem:ERRor[:NEXT]?"]
Syntax = ":SYSTem:ERRor[:NEXT]?"
Description = "Queries and clears the error queue message."
Remarks = "N/A"
"Return Format" = "Returns <Message Number>,<Message Content> (e.g., -113,\"Undefined header;\")."
Example = "N/A"
Class = "System"
Function = "error_queue"
Command = ":SYSTem:ERRor[:NEXT]?"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "N/A"
Is_Query = "Yes"

["3.24.4 :SYSTem:PON"]
Syntax = ":SYSTem:PON <power_on> :SYSTem:PON?"
Description = "Sets or queries the configuration type recalled by the oscilloscope when it is powered on."
Remarks = "N/A"
"Return Format" = "The query returns LAT or DEF."
Example = ":SYSTem:PON LATest  /*Sets to recall the Last value after power on.*/ :SYSTem:PON? /*Returns LAT.*/"
Class = "System"
Function = "poweron_config"
Command = ":SYSTem:PON"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "{LATest|DEFault}"
Is_Query = "Yes"

["3.24.5 :SYSTem:PSTatus"]
Syntax = ":SYSTem:PSTatus <sat> :SYSTem:PSTatus?"
Description = "Sets or queries the power status of the oscilloscope."
Remarks = "• DEFault: after powering on, you must press Power on the front panel to start. • OPEN: the scope starts automatically upon power up."
"Return Format" = "The query returns DEF or OPEN."
Example = ":SYSTem:PSTatus DEFault  /*Sets the power status to DEFault.*/ :SYSTem:PSTatus? /*Returns DEF.*/"
Class = "System"
Function = "power_status"
Command = ":SYSTem:PSTatus"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "{DEFault|OPEN}"
Is_Query = "Yes"

["3.24.6 :SYSTem:OPTion:INSTall"]
Syntax = ":SYSTem:OPTion:INSTall <license>"
Description = "Installs an option."
Remarks = "Use the license file (obtained via RIGOL's website) to install an option. <license> format: \"<series>-<opt>@<code>\"."
"Return Format" = "N/A"
Example = ":SYSTem:OPTion:INSTall DHO900-BODE@A7DEC6C1E10D42EE..."
Class = "System.Option"
Function = "install"
Command = ":SYSTem:OPTion:INSTall"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "ASCII"
Is_Query = "No"

["3.24.7 :SYSTem:OPTion:UNINstall"]
Syntax = ":SYSTem:OPTion:UNINstall"
Description = "Uninstalls all the official options."
Remarks = "After uninstallation, restart the instrument."
"Return Format" = "N/A"
Example = "N/A"
Class = "System.Option"
Function = "uninstall"
Command = ":SYSTem:OPTion:UNINstall"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "N/A"
Is_Query = "No"

["3.24.8 :SYSTem:OPTion:STATus?"]
Syntax = ":SYSTem:OPTion:STATus? <type>"
Description = "Queries whether an option is installed (activated)."
Remarks = "Supports BODE for DHO924S and DHO914S."
"Return Format" = "Returns 0 (not installed) or 1 (installed)."
Example = "N/A"
Class = "System.Option"
Function = "status"
Command = ":SYSTem:OPTion:STATus?"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "{BODE}"
Is_Query = "Yes"

["3.24.9 :SYSTem:OPTion:VALid?"]
Syntax = ":SYSTem:OPTion:VALid? <type>"
Description = "Queries whether an option is activated or not."
Remarks = "Supports BODE for DHO924S and DHO914S."
"Return Format" = "Returns 0 or 1."
Example = "N/A"
Class = "System.Option"
Function = "valid"
Command = ":SYSTem:OPTion:VALid?"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "{BODE}"
Is_Query = "Yes"

["3.24.10 :SYSTem:RAMount?"]
Syntax = ":SYSTem:RAMount?"
Description = "Queries the number of analog channels of the current instrument."
Remarks = "N/A"
"Return Format" = "An integer, e.g. '4' for a 4-channel scope."
Example = "N/A"
Class = "System"
Function = "query_ramount"
Command = ":SYSTem:RAMount?"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "N/A"
Is_Query = "Yes"

["3.24.11 :SYSTem:RESet"]
Syntax = ":SYSTem:RESet"
Description = "Resets the system to power on."
Remarks = "N/A"
"Return Format" = "N/A"
Example = "N/A"
Class = "System"
Function = "reset"
Command = ":SYSTem:RESet"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "N/A"
Is_Query = "No"

["3.24.12 :SYSTem:SETup"]
Syntax = ":SYSTem:SETup <setup_data> :SYSTem:SETup?"
Description = "Sends or reads the data stream of the system setup file."
Remarks = "Uses a TMC data block header (#NX…X) plus the ASCII data for the setup."
"Return Format" = "N/A"
Example = "N/A"
Class = "System"
Function = "setup"
Command = ":SYSTem:SETup"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "Binary data"
Is_Query = "Yes"

["3.24.13 :SYSTem:LOCKed"]
Syntax = ":SYSTem:LOCKed <bool> :SYSTem:LOCKed?"
Description = "Enables/disables the front-panel keys and touch screen; queries the lock status."
Remarks = "N/A"
"Return Format" = "Returns 1 or 0."
Example = ":SYSTem:LOCKed ON  /*Locks the front panel.*/ :SYSTem:LOCKed? /*Returns 1.*/"
Class = "System"
Function = "locked"
Command = ":SYSTem:LOCKed"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "{OFF|ON}"
Is_Query = "Yes"

["3.24.14 :SYSTem:MODules?"]
Syntax = ":SYSTem:MODules?"
Description = "Queries the hardware modules."
Remarks = "Returns 1,0,0,0,0 (1=available,0=not)."
"Return Format" = "e.g. '1,0,0,0,0' for LA, DG, etc."
Example = "N/A"
Class = "System"
Function = "query_modules"
Command = ":SYSTem:MODules?"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "N/A"
Is_Query = "Yes"

["3.24.15 :SYSTem:AUToscale"]
Syntax = ":SYSTem:AUToscale <bool> :SYSTem:AUToscale?"
Description = "Enables or disables the function of the front-panel AUTO key; queries the status of the AUTO menu."
Remarks = "When disabled, the AUTO key operation is blocked."
"Return Format" = "The query returns 1 or 0."
Example = ":SYSTem:AUToscale ON    /*Enables AUTO.*/ :SYSTem:AUToscale? /*Returns 1.*/"
Class = "System"
Function = "autoscale"
Command = ":SYSTem:AUToscale"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "{OFF|ON}"
Is_Query = "Yes"

["3.24.16 :SYSTem:GAMount?"]
Syntax = ":SYSTem:GAMount?"
Description = "Queries the number of grids in the horizontal direction of the screen."
Remarks = "N/A"
"Return Format" = "Returns an integer. Typically '10' for this scope."
Example = "N/A"
Class = "System"
Function = "query_gamount"
Command = ":SYSTem:GAMount?"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "N/A"
Is_Query = "Yes"

["3.24.17 :SYSTem:VERSion?"]
Syntax = ":SYSTem:VERSion?"
Description = "Queries the version number of the SCPI used by the system."
Remarks = "N/A"
"Return Format" = "Returns the SCPI version number in strings."
Example = ":SYSTem:VERSion?   /*Might return 3.0.*/"
Class = "System"
Function = "query_version"
Command = ":SYSTem:VERSion?"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "N/A"
Is_Query = "Yes"

["3.24.18 :SYSTem:DGSTatus?"]
Syntax = ":SYSTem:DGSTatus?"
Description = "Queries whether the DG module exists."
Remarks = "N/A"
"Return Format" = "Returns 1 or 0."
Example = ":SYSTem:DGSTatus? /*Returns 1 if DG is installed.*/"
Class = "System"
Function = "query_dgstatus"
Command = ":SYSTem:DGSTatus?"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "N/A"
Is_Query = "Yes"

["3.24.19 :SYSTem:KEYBOARDCheck?"]
Syntax = ":SYSTem:KEYBOARDCheck? :SOURce:OUTPut:STATe <bool> :SOURce:OUTPut:STATe?"
Description = "Queries the status of the keyboard."
Remarks = "N/A"
"Return Format" = "Returns true or false."
Example = "N/A"
Class = "System"
Function = "keyboard_check"
Command = ":SYSTem:KEYBOARDCheck?"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "N/A"
Is_Query = "Yes"

["3.24.1 :SYSTem:AOUTput".Parameter]
Name = "<auxoutput>"
Type = "Discrete"
Default = "TOUT"
Range = "{TOUT|PFAil}"

["3.24.2 :SYSTem:BEEPer".Parameter]
Name = "<bool>"
Type = "Bool"
Default = "0|OFF"
Range = "{{1|ON}|{0|OFF}}"

["3.24.3 :SYSTem:ERRor[:NEXT]?".Parameter]
Info = "Data incomplete or malformed"

["3.24.4 :SYSTem:PON".Parameter]
Name = "<power_on>"
Type = "Discrete"
Default = "DEFault"
Range = "{LATest|DEFault}"

["3.24.5 :SYSTem:PSTatus".Parameter]
Name = "<sat>"
Type = "Discrete"
Default = "OPEN"
Range = "{DEFault|OPEN}"

["3.24.6 :SYSTem:OPTion:INSTall".Parameter]
Name = "<license>"
Type = "ASCII"
Default = "-"
Range = "String Refer to Remarks"

["3.24.7 :SYSTem:OPTion:UNINstall".Parameter]
Info = "N/A"

["3.24.8 :SYSTem:OPTion:STATus?".Parameter]
Name = "<type>"
Type = "Discrete"
Default = "-"
Range = "{BODE}"

["3.24.9 :SYSTem:OPTion:VALid?".Parameter]
Name = "<type>"
Type = "Discrete"
Default = "-"
Range = "{BODE}"

["3.24.10 :SYSTem:RAMount?".Parameter]
Info = "N/A"

["3.24.11 :SYSTem:RESet".Parameter]
Info = "N/A"

["3.24.12 :SYSTem:SETup".Parameter]
Name = "<setup_data>"
Type = "Binary"
Default = "-"
Range = "Refer to Remarks"

["3.24.13 :SYSTem:LOCKed".Parameter]
Name = "<bool>"
Type = "Bool"
Default = "0|OFF"
Range = "{{1|ON}|{0|OFF}}"

["3.24.14 :SYSTem:MODules?".Parameter]
Info = "N/A"

["3.24.15 :SYSTem:AUToscale".Parameter]
Name = "<bool>"
Type = "Bool"
Default = "1|ON"
Range = "{{1|ON}|{0|OFF}}"

["3.24.16 :SYSTem:GAMount?".Parameter]
Info = "Data incomplete or malformed"

["3.24.17 :SYSTem:VERSion?".Parameter]
Info = "N/A"

["3.24.18 :SYSTem:DGSTatus?".Parameter]
Info = "N/A"

["3.24.19 :SYSTem:KEYBOARDCheck?".Parameter]
Info = "N/A"
