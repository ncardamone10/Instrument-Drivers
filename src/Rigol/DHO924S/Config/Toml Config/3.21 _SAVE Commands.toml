["3.21.1 :SAVE:IMAGe:INVert"]
Syntax = ":SAVE:IMAGe:INVert <bool> :SAVE:IMAGe:INVert?"
Description = "Enables or disables the invert function when saving images; or queries the status of the invert function."
Remarks = "Useful for enhancing visibility or conforming to specific visual standards."
Return_Format = "The query returns 1 (enabled) or 0 (disabled)."
Example = ":SAVE:IMAGe:INVert ON          /*Enables the invert function for image saving.*/ :SAVE:IMAGe:INVert?            /*The query returns 1, indicating invert is enabled.*/"
Class = "Save.Image"
Function = "invert"
Command = ":SAVE:IMAGe:INVert"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "Boolean"
Is_Query = "True"

["3.21.2 :SAVE:IMAGe:COLor"]
Syntax = ":SAVE:IMAGe:COLor <color> :SAVE:IMAGe:COLor?"
Description = "Sets the color mode for saved images to either Color or Gray; or queries the current color setting."
Remarks = "Selecting 'Gray' can reduce file size and is suitable for specific documentation purposes."
Return_Format = "The query returns 'COL' for Color or 'GRAY' for Grayscale."
Example = ":SAVE:IMAGe:COLor GRAY            /*Sets the image color for saving to grayscale.*/ :SAVE:IMAGe:COLor?                 /*The query returns 'GRAY'.*/"
Class = "Save.Image"
Function = "color"
Command = ":SAVE:IMAGe:COLor"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "{COL|GRAY}"
Is_Query = "True"

["3.21.3 :SAVE:IMAGe:FORMat"]
Syntax = ":SAVE:IMAGe:FORMat <format> :SAVE:IMAGe:FORMat?"
Description = "Determines or queries the format in which images are saved, such as PNG, BMP, or JPG."
Remarks = "Choosing the correct format is essential for compatibility and quality needs."
Return_Format = "The query returns the format type: PNG, BMP, or JPG."
Example = ":SAVE:IMAGe:FORMat PNG      /*Sets the image saving format to PNG.*/ :SAVE:IMAGe:FORMat?             /*The query returns 'PNG'.*/"
Class = "Save.Image"
Function = "format"
Command = ":SAVE:IMAGe:FORMat"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "{PNG|BMP|JPG}"
Is_Query = "True"

["3.21.4 :SAVE:IMAGe:HEADer"]
Syntax = ":SAVE:IMAGe:HEADer <bool> :SAVE:IMAGe:HEADer?"
Description = "Controls whether to include a header with the image; queries the current setting."
Remarks = "The header typically includes metadata such as instrument model and date."
Return_Format = "The query returns 1 (header displayed) or 0 (no header)."
Example = ":SAVE:IMAGe:HEADer ON /*Enables the display of the image header.*/ :SAVE:IMAGe:HEADer? /*The query returns 1, indicating the header is enabled.*/"
Class = "Save.Image"
Function = "header"
Command = ":SAVE:IMAGe:HEADer"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "Boolean"
Is_Query = "True"

["3.21.5 :SAVE:IMAGe:DATA?"]
Syntax = ":SAVE:IMAGe:DATA?"
Description = "Retrieves the binary data stream of the currently displayed image."
Remarks = "The output format includes a TMC header, binary data, and a terminator, providing a complete image file in memory."
Return_Format = "Outputs the binary data stream of the image."
Example = ":SAVE:IMAGe:DATA? /*The query outputs the binary data stream of the image.*/"
Class = "Save.Image"
Function = "data"
Command = ":SAVE:IMAGe:DATA?"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "N/A"
Is_Query = "True"


["3.21.6 :SAVE:IMAGe"]
Syntax = ":SAVE:IMAGe <path>"
Description = "Stores the currently displayed screen content as an image file at the specified path."
Remarks = "Supports PNG, BMP, and JPEG formats. Ensure the file path and name follow the system's requirements for valid paths and filenames."
Return_Format = "N/A"
Example = ":SAVE:IMAGe D:/123.png /*Stores the screen content as '123.png' on the external storage device D.*/"
Class = "Save.Image"
Function = "save_as"
Command = ":SAVE:IMAGe"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "String"
Is_Query = "False"

["3.21.7 :SAVE:SETup"]
Syntax = ":SAVE:SETup <path>"
Description = "Saves the current oscilloscope setup parameters to a file at the specified path."
Remarks = "Useful for saving configurations for repetitive tests. File extension should be '.stp'."
Return_Format = "N/A"
Example = ":SAVE:SETup D:/setup123.stp  /*Saves the setup parameters as 'setup123.stp' on the external storage device D.*/"
Class = "Save"
Function = "path_setup"
Command = ":SAVE:SETup"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "N/A"
Is_Query = "False"

["3.21.8 :SAVE:WAVeform"]
Syntax = ":SAVE:WAVeform <path>"
Description = "Saves the current waveform data to a file at the specified path."
Remarks = "Supports '.bin' or '.csv' formats for waveform data."
Return_Format = "N/A"
Example = ":SAVE:WAVeform D:/wave123.csv /*Saves the waveform data as 'wave123.csv' on the external storage device D.*/"
Class = "Save.Waveform"
Function = "save_as"
Command = ":SAVE:WAVeform"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "String"
Is_Query = "False"

["3.21.9 :SAVE:MEMory:WAVeform"]
Syntax = ":SAVE:MEMory:WAVeform <path>"
Description = "Saves the memory waveform data to the specified path."
Remarks = "Allows saving in various binary formats, including '.bin', '.csv', or '.wfm'."
Return_Format = "N/A"
Example = ":SAVE:MEMory:WAVeform D:/memory_wave123.bin /*Saves memory waveform data as 'memory_wave123.bin' on external storage D.*/"
Class = "Save.Waveform"
Function = "memory_save_as"
Command = ":SAVE:MEMory:WAVeform"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "String"
Is_Query = "False"

["3.21.10 :SAVE:STATus?"]
Syntax = ":SAVE:STATus?"
Description = "Queries the status of the last save operation to check if it has been completed."
Remarks = "Returns '0' for in-progress or '1' for completed."
Return_Format = "The query returns '0' or '1'."
Example = ":SAVE:STATus? /*Queries the completion status of the last save operation.*/"
Class = "Save"
Function = "status"
Command = ":SAVE:STATus?"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "N/A"
Is_Query = "True"

["3.21.11 :SAVE:OVERlap"]
Syntax = ":SAVE:OVERlap <bool> :SAVE:OVERlap?"
Description = "Sets or queries whether to overwrite existing files when saving."
Remarks = "Useful when updating files frequently without needing to manually delete the older versions."
Return_Format = "The query returns '1' for enabled or '0' for disabled."
Example = ":SAVE:OVERlap ON /*Enables overwriting of existing files.*/ :SAVE:OVERlap? /*The query returns '1', indicating overwriting is enabled.*/"
Class = "Save"
Function = "overwrite_existing"
Command = ":SAVE:OVERlap"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "Boolean"
Is_Query = "True"

["3.21.12 :SAVE:PREFix"]
Syntax = ":SAVE:PREFix <name> :SAVE:PREFix?"
Description = "Sets or queries the prefix used in filenames for saved files."
Remarks = "Helps in organizing and identifying files, especially when generating multiple files in sequence."
Return_Format = "The query returns the set prefix as a string."
Example = ":SAVE:PREFix Experiment1 /*Sets the filename prefix to 'Experiment1'.*/ :SAVE:PREFix? /*The query returns 'Experiment1'.*/"
Class = "Save"
Function = "filename_prefix"
Command = ":SAVE:PREFix"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "String"
Is_Query = "True"

["3.21.13 :LOAD:SETup"]
Syntax = ":LOAD:SETup <path> :SEARch:COUNt?"
Description = "Loads oscilloscope setup from a specified file and optionally queries the count of search events."
Remarks = "Ensures quick configuration for repetitive tests. The file path should include '.stp' extension."
Return_Format = "N/A"
Example = ":LOAD:SETup D:/setup123.stp /*Loads setup from 'setup123.stp' on external storage D.*/"
Class = "Load"
Function = "from_file"
Command = ":LOAD:SETup"
Input_Min = "N/A"
Input_Max = "N/A"
Input_Values = "String"
Is_Query = "False"


["3.21.1 :SAVE:IMAGe:INVert".Parameter]
Name = "<bool>"
Type = "Bool"
Default = "0|OFF"
Range = "{{1|ON}|{0|OFF}}"

["3.21.2 :SAVE:IMAGe:COLor".Parameter]
Name = "<color>"
Type = "Discrete"
Default = "COLor"
Range = "{COLor|GRAY}"

["3.21.3 :SAVE:IMAGe:FORMat".Parameter]
Name = "<format>"
Type = "Discrete"
Default = "-"
Range = "{PNG|BMP|JPG}"

["3.21.4 :SAVE:IMAGe:HEADer".Parameter]
Name = "<bool>"
Type = "Bool"
Default = "-"
Range = "{{1|ON}|{0|OFF}}"

["3.21.5 :SAVE:IMAGe:DATA?".Parameter]
Info = "N/A"

["3.21.6 :SAVE:IMAGe".Parameter]
Name = "<path>"
Type = "ASCII"
Default = "-"
Range = "String Refer to Remarks"

["3.21.7 :SAVE:SETup".Parameter]
Name = "<path>"
Type = "ASCII"
Default = "-"
Range = "String Refer to Remarks"

["3.21.8 :SAVE:WAVeform".Parameter]
Name = "<path>"
Type = "ASCII"
Default = "240"
Range = "String Refer to Remarks -"

["3.21.9 :SAVE:MEMory:WAVeform".Parameter]
Name = "<path>"
Type = "ASCII"
Default = "-"
Range = "String Refer to Remarks"

["3.21.10 :SAVE:STATus?".Parameter]
Info = "N/A"

["3.21.11 :SAVE:OVERlap".Parameter]
Name = "<bool>"
Type = "Bool"
Default = "-"
Range = "{{1|ON}|{0|OFF}}"

["3.21.12 :SAVE:PREFix".Parameter]
Name = "<name>"
Type = "ASCII"
Default = "-"
Range = "String Refer to Remarks"

["3.21.13 :LOAD:SETup".Parameter]
Name = "<path>"
Type = "ASCII"
Default = "N/A"
Range = "String Refer to Remarks -"
